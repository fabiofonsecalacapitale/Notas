- eclipse uses the artifact in the workspace if it is open (the binary .class files in the target/classes folder). Otherwise, it will use the jar in the local repository .m2
- will see options for: include the main class in the jar manifest file, include the source code in the jar file and include 
- if you want the jar to include the source code, check: https://stackoverflow.com/questions/23933911/include-source-code-while-exporting-a-jar-using-maven
- the jar generated for the artifact does not include the dependencies (the other jars), but there are plugin for this. This big jar is called uber-jar
- the jar generated by maven usually does not include the Manifest file:
  Here's how to do it: https://stackoverflow.com/questions/9689793/cant-execute-jar-file-no-main-manifest-attribute/9689877

- for dependencyManagement, BOM (Bill Of Material), transitive dependencies (which are by default in Maven), import scopes etc.
the BOM keeps the versions in the project in sync with the    versions distributed in the library

  see 
http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Management


- to get the effective POM: mvn help:effective-pom
******************************************************************************************

group id: organization
artifactid: name of your artifact
version: your version

<groupId>fonseca.fabio</groupId>  
<artifactId>test2</artifactId>
<version>0.0.1-SNAPSHOT</version>
<packaging>jar</packaging>

- you can access property variables by ${project.version} by following the xml tags
  or you can custom your own properties:
  <properties>
     <my.plugin.version>1.5</my.plugin.version>
  </properties>
  Then you use the property as ${my.plugin.version}

.settings.xml

.m2: this is the local repository

mvn clean: clean the target file
mvn package: will create the jar in the target folder
mvn install: will create the jar in the local repository

what is mvn generate sources?

*********************Basic Structure of maven and its folders***************************

pom.xml: dependencies
target folder: the output of the maven project build (this way you decouple it from the source code)

src/main/java
src/main/resources
src/test/java
src/test/resources

************************************************
You can also specify that you only want the dependency available for tests with the scope tag being "test":
<dependencies>
          <groupId>fonseca.fabio</groupId>
  	  <artifactId>test</artifactId>
  	  <version>0.0.1-SNAPSHOT</version>
  	  <scope>test</scope>
    </dependency>
</dependencies>


************************************************
- Interesting references: 



- How to Create an Executable JAR (fat jar) with Maven
 (and a uber-jar)
https://www.baeldung.com/executable-jar-with-maven


- Spring with Maven BOM: 
Explaing the order of precedence (artifact, parent and imported pom for instance)

https://www.baeldung.com/spring-maven-bom


- Explaining that jar files in general
http://www.avajava.com/tutorials/lessons/how-do-i-build-a-jar-file-that-contains-its-dependencies.html
- What is a uber jar (fat jar) and its different type:
https://imagej.net/Uber-JAR
- Getting started: java projects with maven
https://spring.io/guides/gs/maven/
- Main Question on Goole: are jars generated with dependencies?
Gets:https://stackoverflow.com/questions/574594/how-can-i-create-an-executable-jar-with-dependencies-using-maven
     and http://www.avajava.com/tutorials/lessons/how-do-i-build-a-jar-file-that-contains-its-dependencies.html
     and https://www.baeldung.com/executable-jar-with-maven

Obs: When doing a Run Java Application, Eclipse will check if the source code has changed first. If it did, then it will first compile and then run. If it hasn't, it will run without bothering to compile. The side effect of this, is that if you erase the .class file and do not change the source code, when trying to run the program, Eclipse will not be able to find the class.















